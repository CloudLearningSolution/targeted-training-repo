name: Vertex AI CI/CD - Train Model (Dev & Prod)

# This GitHub Actions workflow is triggered on the following events:
# - A push to the 'main' branch.
# - A pull request targeting the 'main' branch.
# - Manual invocation via 'workflow_dispatch'.
#
# Uncomment the second 'branches' line under 'push' to also trigger on any branch matching 'feature/*'.
# on:
  # push:
    # branches: [main]
#   branches: [main, feature/*]
  # pull_request:
    # branches: [main]
  # workflow_dispatch:
  # ------------------------------------------------------------------------------
  # Environment Variables Documentation
  #
  # This section defines environment variables used throughout the Vertex AI CI/CD
  # workflow for both development and production pipelines.
  #
  # Common Variables:
  #   - GCP_PROJECT_ID: Google Cloud project identifier (from secrets).
  #   - GCP_REGION: Google Cloud region for Vertex AI resources.
  #   - MODEL_DISPLAY_NAME: Display name for the deployed model.
  #   - SHARED_MLOPS_BUCKET_NAME: GCS bucket for shared MLOps assets (from secrets).
  #   - PIPELINE_RUNS_GCS_ROOT_BASE: Root GCS path for pipeline run artifacts.
  #   - VERTEX_PIPELINE_SERVICE_ACCOUNT: Service account email for Vertex AI pipelines.
  #
  # Development Pipeline Variables:
  #   - DEV_PIPELINE_PYTHON_FILE: Path to the development pipeline Python source.
  #   - DEV_PIPELINE_COMPILED_FILE: Output file for compiled development pipeline.
  #   - DEV_PIPELINE_DISPLAY_NAME: Display name for the development pipeline.
  #   - DEV_INPUT_DATA_GCS_URI: GCS URI for development input data.
  #   - DEV_REG_RATE: Regularization rate for development model training.
  #   - DEV_MIN_ACCURACY: Minimum accuracy threshold for development model.
  #
  # Production Pipeline Variables:
  #   - PROD_PIPELINE_PYTHON_FILE: Path to the production pipeline Python source.
  #   - PROD_PIPELINE_COMPILED_FILE: Output file for compiled production pipeline.
  #   - PROD_PIPELINE_DISPLAY_NAME: Display name for the production pipeline.
  #   - PROD_INPUT_DATA_GCS_URI: GCS URI for production input data.
  #   - PROD_REG_RATE: Regularization rate for production model training.
  #   - PROD_MIN_ACCURACY: Minimum accuracy threshold for production model.
  #
  # Secrets:
  #   - All variables referencing `${{ secrets.* }}` are securely injected from
  #     GitHub Actions secrets and should be configured in the repository settings.
  # ------------------------------------------------------------------------------

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: 'us-east1'
  MODEL_DISPLAY_NAME: 'diabetes-prediction-model'
  SHARED_MLOPS_BUCKET_NAME: ${{ secrets.GCP_SHARED_MLOPS_BUCKET_NAME }}
  PIPELINE_RUNS_GCS_ROOT_BASE: 'gs://${{ secrets.GCP_SHARED_MLOPS_BUCKET_NAME }}/pipeline-runs'
  VERTEX_PIPELINE_SERVICE_ACCOUNT: ${{ secrets.VERTEX_PIPELINE_SA_EMAIL }}

  DEV_PIPELINE_PYTHON_FILE: 'src/vertex_pipeline_dev.py'
  DEV_PIPELINE_COMPILED_FILE: 'vertex_pipeline_dev.yaml'
  DEV_PIPELINE_DISPLAY_NAME: 'mlops-diabetes-pipeline-dev-vertex'
  DEV_INPUT_DATA_GCS_URI: 'gs://${{ secrets.GCP_SHARED_MLOPS_BUCKET_NAME }}/dev/raw/diabetes.csv'
  DEV_REG_RATE: 0.05
  DEV_MIN_ACCURACY: 0.70

  PROD_PIPELINE_PYTHON_FILE: 'src/vertex_pipeline_prod.py'
  PROD_PIPELINE_COMPILED_FILE: 'vertex_pipeline_prod.yaml'
  PROD_PIPELINE_DISPLAY_NAME: 'mlops-diabetes-pipeline-prod-vertex'
  PROD_INPUT_DATA_GCS_URI: 'gs://${{ secrets.GCP_SHARED_MLOPS_BUCKET_NAME }}/prod/raw/diabetes.csv'
  PROD_REG_RATE: 0.05
  PROD_MIN_ACCURACY: 0.80

jobs:
  setup-and-compile-gcp:
    name: Setup GCP & Compile Vertex AI Pipelines
    runs-on: ubuntu-latest
    environment: development  # or production, as appropriate
    outputs:
      dev_pipeline_path: ${{ steps.compile.outputs.dev_pipeline_path_abs }}
      prod_pipeline_path: ${{ steps.compile.outputs.prod_pipeline_path_abs }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r src/requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: ${{ secrets.GHA_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2.1.0

      - name: Install gcloud components
        run: gcloud components install alpha beta --quiet

      - name: Enable required GCP services
        run: |
          gcloud auth list
          gcloud config list project
          gcloud services enable aiplatform.googleapis.com storage.googleapis.com --project ${{ env.GCP_PROJECT_ID }}

      - name: Compile KFP Pipelines
        id: compile
        run: |
          python src/compiler.py --py "${{ env.DEV_PIPELINE_PYTHON_FILE }}" --output "${{ env.DEV_PIPELINE_COMPILED_FILE }}"
          python src/compiler.py --py "${{ env.PROD_PIPELINE_PYTHON_FILE }}" --output "${{ env.PROD_PIPELINE_COMPILED_FILE }}"
          echo "dev_pipeline_path_abs=${{ github.workspace }}/${{ env.DEV_PIPELINE_COMPILED_FILE }}" >> $GITHUB_OUTPUT
          echo "prod_pipeline_path_abs=${{ github.workspace }}/${{ env.PROD_PIPELINE_COMPILED_FILE }}" >> $GITHUB_OUTPUT

      - name: Audit CPU Limits (Dev and Prod Pipelines)
        run: |
          python src/audit_cpu_limits.py "${{ env.DEV_PIPELINE_COMPILED_FILE }}"
          python src/audit_cpu_limits.py "${{ env.PROD_PIPELINE_COMPILED_FILE }}"

      - name: Upload compiled pipelines
        uses: actions/upload-artifact@v4.3.4
        with:
          name: compiled-vertex-pipelines
          path: |
            ${{ env.DEV_PIPELINE_COMPILED_FILE }}
            ${{ env.PROD_PIPELINE_COMPILED_FILE }}

  train-dev-vertex:
    name: Train Model in Vertex AI (Development)
    runs-on: ubuntu-latest
    needs: setup-and-compile-gcp
    # if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: development
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r src/requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: ${{ secrets.GHA_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2.1.0

      - name: Install gcloud components
        run: gcloud components install alpha beta --quiet

      - name: Download compiled pipelines
        uses: actions/download-artifact@v4.1.8
        with:
          name: compiled-vertex-pipelines
          path: ./compiled-pipelines

      - name: Submit Dev Vertex AI Job
        run: |
          PIPELINE_JOB_ID="dev-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}"
          PARAMS_JSON=$(jq -n \
            --arg project_id "${{ env.GCP_PROJECT_ID }}" \
            --arg region "${{ env.GCP_REGION }}" \
            --arg model_display_name "${{ env.MODEL_DISPLAY_NAME }}" \
            --arg input_raw_data_gcs_uri "${{ env.DEV_INPUT_DATA_GCS_URI }}" \
            --arg reg_rate "${{ env.DEV_REG_RATE }}" \
            --arg min_accuracy "${{ env.DEV_MIN_ACCURACY }}" \
            '{project_id: $project_id, region: $region, model_display_name: $model_display_name, input_raw_data_gcs_uri: $input_raw_data_gcs_uri, reg_rate: ($reg_rate|tonumber), min_accuracy: ($min_accuracy|tonumber)}')
          LABELS_JSON=$(jq -n \
            --arg commit_sha "${GITHUB_SHA::7}" \
            --arg trigger_event "${GITHUB_EVENT_NAME}" \
            --arg env "dev" \
            '{commit_sha: $commit_sha, trigger_event: $trigger_event, env: $env}')
          python src/run_pipeline.py \
            --project-id "${{ env.GCP_PROJECT_ID }}" \
            --region "${{ env.GCP_REGION }}" \
            --pipeline-spec-uri "./compiled-pipelines/${{ env.DEV_PIPELINE_COMPILED_FILE }}" \
            --service-account "${{ env.VERTEX_PIPELINE_SERVICE_ACCOUNT }}" \
            --pipeline-root "${{ env.PIPELINE_RUNS_GCS_ROOT_BASE }}/dev/${PIPELINE_JOB_ID}" \
            --display-name "${{ env.DEV_PIPELINE_DISPLAY_NAME }}" \
            --parameter-values-json "$PARAMS_JSON" \
            --labels-json "$LABELS_JSON" \
            --enable-caching

  require-approval:
    name: Require Approval Before Production
    runs-on: ubuntu-latest
    needs: train-dev-vertex
    environment: production
    steps:
      - name: Await Reviewer Approval
        run: echo "ðŸ›‘ Waiting for reviewer approval before running production pipeline..."

  train-prod-vertex:
    name: Train Model in Vertex AI (Production)
    runs-on: ubuntu-latest
    needs: require-approval
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Delay to prevent quota contention
        run: sleep 120

      - name: Check out repo
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r src/requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: ${{ secrets.GHA_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2.1.0

      - name: Install gcloud components
        run: gcloud components install alpha beta --quiet

      - name: Download compiled pipelines
        uses: actions/download-artifact@v4.1.8
        with:
          name: compiled-vertex-pipelines
          path: ./compiled-pipelines

      - name: Submit Prod Vertex AI Job
        run: |
          PIPELINE_JOB_ID="prod-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}"
          PARAMS_JSON=$(jq -n \
            --arg project_id "${{ env.GCP_PROJECT_ID }}" \
            --arg region "${{ env.GCP_REGION }}" \
            --arg model_display_name "${{ env.MODEL_DISPLAY_NAME }}" \
            --arg input_raw_data_gcs_uri "${{ env.PROD_INPUT_DATA_GCS_URI }}" \
            --arg reg_rate "${{ env.PROD_REG_RATE }}" \
            --arg min_accuracy "${{ env.PROD_MIN_ACCURACY }}" \
            '{project_id: $project_id, region: $region, model_display_name: $model_display_name, input_raw_data_gcs_uri: $input_raw_data_gcs_uri, reg_rate: ($reg_rate|tonumber), min_accuracy: ($min_accuracy|tonumber)}')
          LABELS_JSON=$(jq -n \
            --arg commit_sha "${GITHUB_SHA::7}" \
            --arg trigger_event "${GITHUB_EVENT_NAME}" \
            --arg env "prod" \
            '{commit_sha: $commit_sha, trigger_event: $trigger_event, env: $env}')
          python src/run_pipeline.py \
            --project-id "${{ env.GCP_PROJECT_ID }}" \
            --region "${{ env.GCP_REGION }}" \
            --pipeline-spec-uri "./compiled-pipelines/${{ env.PROD_PIPELINE_COMPILED_FILE }}" \
            --service-account "${{ env.VERTEX_PIPELINE_SERVICE_ACCOUNT }}" \
            --pipeline-root "${{ env.PIPELINE_RUNS_GCS_ROOT_BASE }}/prod/${PIPELINE_JOB_ID}" \
            --display-name "${{ env.PROD_PIPELINE_DISPLAY_NAME }}" \
            --parameter-values-json "$PARAMS_JSON" \
            --labels-json "$LABELS_JSON" \
            --enable-caching
